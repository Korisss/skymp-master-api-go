// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	domain "github.com/Korisss/skymp-master-api-go/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), email, password)
}

// GetUserName mocks base method.
func (m *MockAuthorization) GetUserName(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserName", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockAuthorizationMockRecorder) GetUserName(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockAuthorization)(nil).GetUserName), id)
}

// MockVerification is a mock of Verification interface.
type MockVerification struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationMockRecorder
}

// MockVerificationMockRecorder is the mock recorder for MockVerification.
type MockVerificationMockRecorder struct {
	mock *MockVerification
}

// NewMockVerification creates a new mock instance.
func NewMockVerification(ctrl *gomock.Controller) *MockVerification {
	mock := &MockVerification{ctrl: ctrl}
	mock.recorder = &MockVerificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerification) EXPECT() *MockVerificationMockRecorder {
	return m.recorder
}

// GetVerificationCode mocks base method.
func (m *MockVerification) GetVerificationCode(id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationCode", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationCode indicates an expected call of GetVerificationCode.
func (mr *MockVerificationMockRecorder) GetVerificationCode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationCode", reflect.TypeOf((*MockVerification)(nil).GetVerificationCode), id)
}

// SetDiscord mocks base method.
func (m *MockVerification) SetDiscord(id, discord string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDiscord", id, discord)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDiscord indicates an expected call of SetDiscord.
func (mr *MockVerificationMockRecorder) SetDiscord(id, discord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiscord", reflect.TypeOf((*MockVerification)(nil).SetDiscord), id, discord)
}

// SetVerificationCode mocks base method.
func (m *MockVerification) SetVerificationCode(id string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerificationCode", id, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerificationCode indicates an expected call of SetVerificationCode.
func (mr *MockVerificationMockRecorder) SetVerificationCode(id, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerificationCode", reflect.TypeOf((*MockVerification)(nil).SetVerificationCode), id, code)
}
